{"version":3,"sources":["service-worker.js"],"names":["cacheName","filesToCache","self","addEventListener","event","console","log","waitUntil","caches","open","then","cache","addAll","catch","error","keys","cacheNames","Promise","all","map","delete","request","respondWith","match","response","fetch","res","responseToCache","clone","put"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAA2B;AAC3B,MAAMA,YAAY,UAAlB;;AAEA,MAAMC,eAAe,CACnB,UADmB,CAArB;;AAIAC,KAAKC,gBAAL,CAAsB,SAAtB,EAAkCC,KAAD,IAAW;AAC1CC,UAAQC,GAAR,CAAY,gBAAZ;AACAF,QAAMG,SAAN,CACEC,OAAOC,IAAP,CAAYT,SAAZ,EACGU,IADH,CACQC,SAASA,MAAMC,MAAN,CAAaX,YAAb,EACZS,IADY,CACP,MAAM;AACVL,YAAQC,GAAR,CAAY,kBAAZ;AACD,GAHY,CADjB,EAKGO,KALH,CAKUC,KAAD,IAAW;AAChBT,YAAQC,GAAR,CAAY,8BAAZ,EAA4CQ,KAA5C;AACD,GAPH,CADF;AAUD,CAZD;;AAcAZ,KAAKC,gBAAL,CAAsB,UAAtB,EAAmCC,KAAD,IAAW;AAC3CC,UAAQC,GAAR,CAAY,iBAAZ;AACAF,QAAMG,SAAN,CACEC,OAAOO,IAAP,GAAcL,IAAd,CAAmBM,cAAcC,QAAQC,GAAR,CAC/BF,WAAWG,GAAX,CAAgBR,KAAD,IAAW;AACxB,QAAIA,UAAUX,SAAd,EAAyB;AACvB,aAAOQ,OAAOY,MAAP,CAAcT,KAAd,CAAP;AACD;AACF,GAJD,CAD+B,CAAjC,CADF;AASD,CAXD;;AAaAT,KAAKC,gBAAL,CAAsB,OAAtB,EAAgCC,KAAD,IAAW;AACxCC,UAAQC,GAAR,CAAY,cAAZ;AACA,QAAM,EAAEe,OAAF,KAAcjB,KAApB;AACAA,QAAMkB,WAAN,CACEd,OAAOe,KAAP,CAAaF,OAAb,EACGX,IADH,CACSc,QAAD,IAAc;AAClB,QAAIA,QAAJ,EAAc;AACZ,aAAOA,QAAP;AACD;AACD,WAAOC,MAAMJ,OAAN,EAAeX,IAAf,CAAqBgB,GAAD,IAAS;AAClC,YAAMC,kBAAkBD,IAAIE,KAAJ,EAAxB;AACApB,aAAOC,IAAP,CAAYT,SAAZ,EAAuBU,IAAvB,CAA6BC,KAAD,IAAW;AACrCA,cAAMkB,GAAN,CAAUR,OAAV,EAAmBM,eAAnB;AACD,OAFD;AAGA,aAAOH,QAAP;AACD,KANM,CAAP;AAOD,GAZH,CADF;AAeD,CAlBD","file":"service-worker.map","sourceRoot":"../../src","sourcesContent":["/* eslint no-console: 0 */ // --> OFF\nconst cacheName = 'cache-v1'\n\nconst filesToCache = [\n  './app.js',\n]\n\nself.addEventListener('install', (event) => {\n  console.log('Event: Install')\n  event.waitUntil(\n    caches.open(cacheName)\n      .then(cache => cache.addAll(filesToCache)\n        .then(() => {\n          console.log('All files cached')\n        }))\n      .catch((error) => {\n        console.log('Error occured while caching ', error)\n      }),\n  )\n})\n\nself.addEventListener('activate', (event) => {\n  console.log('Event: Activate')\n  event.waitUntil(\n    caches.keys().then(cacheNames => Promise.all(\n      cacheNames.map((cache) => {\n        if (cache !== cacheName) {\n          return caches.delete(cache)\n        }\n      }),\n    )),\n  )\n})\n\nself.addEventListener('fetch', (event) => {\n  console.log('Event: Fetch')\n  const { request } = event\n  event.respondWith(\n    caches.match(request)\n      .then((response) => {\n        if (response) {\n          return response\n        }\n        return fetch(request).then((res) => {\n          const responseToCache = res.clone()\n          caches.open(cacheName).then((cache) => {\n            cache.put(request, responseToCache)\n          })\n          return response\n        })\n      }),\n  )\n})\n"]}