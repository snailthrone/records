{"version":3,"sources":["service-worker.js"],"names":["cacheName","filesToCache","self","addEventListener","event","log","waitUntil","caches","open","then","cache","addAll","catch","error","keys","cacheNames","Promise","all","map","delete","request","respondWith","match","response","fetch","res","responseToCache","clone","put"],"mappings":";AACA,MAAMA,EAAY,WAEZC,EAAe,CACnB,kBAGFC,KAAKC,iBAAiB,UAAYC,IACxBC,QAAAA,IAAI,kBACNC,EAAAA,UACJC,OAAOC,KAAKR,GACTS,KAAKC,GAASA,EAAMC,OAAOV,GACzBQ,KAAK,KACIJ,QAAAA,IAAI,uBAEfO,MAAOC,IACER,QAAAA,IAAI,+BAAgCQ,QAKpDX,KAAKC,iBAAiB,WAAaC,IACzBC,QAAAA,IAAI,mBACNC,EAAAA,UACJC,OAAOO,OAAOL,KAAKM,GAAcC,QAAQC,IACvCF,EAAWG,IAAKR,IACVA,GAAAA,IAAUV,EACLO,OAAAA,OAAOY,OAAOT,UAO/BR,KAAKC,iBAAiB,QAAUC,IACtBC,QAAAA,IAAI,gBACN,MAAA,QAAEe,GAAYhB,EACdiB,EAAAA,YACJd,OAAOe,MAAMF,GACVX,KAAMc,GACDA,GAGGC,MAAMJ,GAASX,KAAMgB,IACpBC,MAAAA,EAAkBD,EAAIE,QAIrBJ,OAHAf,OAAAA,KAAKR,GAAWS,KAAMC,IACrBkB,EAAAA,IAAIR,EAASM,KAEdH","file":"service-worker.map","sourceRoot":"../src","sourcesContent":["/* eslint no-console: 0 */ // --> OFF\nconst cacheName = 'cache-v1'\n\nconst filesToCache = [\n  './js/bundle.js',\n]\n\nself.addEventListener('install', (event) => {\n  console.log('Event: Install')\n  event.waitUntil(\n    caches.open(cacheName)\n      .then(cache => cache.addAll(filesToCache)\n        .then(() => {\n          console.log('All files cached')\n        }))\n      .catch((error) => {\n        console.log('Error occured while caching ', error)\n      }),\n  )\n})\n\nself.addEventListener('activate', (event) => {\n  console.log('Event: Activate')\n  event.waitUntil(\n    caches.keys().then(cacheNames => Promise.all(\n      cacheNames.map((cache) => {\n        if (cache !== cacheName) {\n          return caches.delete(cache)\n        }\n      }),\n    )),\n  )\n})\n\nself.addEventListener('fetch', (event) => {\n  console.log('Event: Fetch')\n  const { request } = event\n  event.respondWith(\n    caches.match(request)\n      .then((response) => {\n        if (response) {\n          return response\n        }\n        return fetch(request).then((res) => {\n          const responseToCache = res.clone()\n          caches.open(cacheName).then((cache) => {\n            cache.put(request, responseToCache)\n          })\n          return response\n        })\n      }),\n  )\n})\n"]}